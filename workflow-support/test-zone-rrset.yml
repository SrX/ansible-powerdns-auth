%YAML 1.2
---
- hosts: localhost
  connection: local
  gather_facts: false

  vars:
    ansible_python_interpreter: python
    pdns_version: "{{ lookup('ansible.builtin.env', 'pdns_version') }}"
    common_args: &common
      api_key: foo

  tasks:
    - name: check zone creation with one rrset, with default TTL
      kpfleming.powerdns_auth.zone:
        <<: *common
        name: d1.rrset.example.
        state: present
        properties:
          kind: Native
          nameservers:
            - ns.example.
          soa:
            mname: localhost.
            rname: hostmaster.localhost.
          rrsets:
            - name: t1.d1.rrset.example.
              type: A
              records:
                - content: 192.168.0.1
                - content: 192.168.1.2
                - content: 192.168.3.4
      ignore_errors: true
      register: result

    - ansible.builtin.assert:
        quiet: true
        that:
          - result['exception'] is not defined
          - not result.failed
          - result.changed
          - d1_rrset[0]['type'] == 'A'
          - d1_rrset[0]['ttl'] == 3600
          - (d1_rrset | sort(attribute='address'))[0]['address'] == "192.168.0.1"
          - (d1_rrset | sort(attribute='address'))[1]['address'] == "192.168.1.2"
          - (d1_rrset | sort(attribute='address'))[2]['address'] == "192.168.3.4"
      vars:
        d1_rrset: "{{ lookup('dig_local', 't1.d1.rrset.example.', qtype='A', flat=0, fail_on_error=false, real_empty=false) }}"

    - name: check for failure when rrset includes NS
      kpfleming.powerdns_auth.zone:
        <<: *common
        name: d2.rrset.example.
        state: present
        properties:
          kind: Native
          nameservers:
            - ns.example.
          soa:
            mname: localhost.
            rname: hostmaster.localhost.
          rrsets:
            - name: d2.rrset.example.
              type: NS
              records:
                - content: ns1.invalid.
      ignore_errors: true
      register: result

    - ansible.builtin.assert:
        quiet: true
        that:
          - result['exception'] is not defined
          - result.failed

    - name: check for failure when rrset includes SOA
      kpfleming.powerdns_auth.zone:
        <<: *common
        name: d3.rrset.example.
        state: present
        properties:
          kind: Native
          nameservers:
            - ns.example.
          soa:
            mname: localhost.
            rname: hostmaster.localhost.
          rrsets:
            - name: d3.rrset.example.
              type: SOA
              records:
                - content: invalid SOA
      ignore_errors: true
      register: result

    - ansible.builtin.assert:
        quiet: true
        that:
          - result['exception'] is not defined
          - result.failed

    - name: check zone creation of a zone with more than one rrset, non default ttl and disabled record
      kpfleming.powerdns_auth.zone:
        <<: *common
        name: d4.rrset.example.
        state: present
        properties:
          kind: Native
          nameservers:
            - ns.example.
          soa:
            mname: localhost.
            rname: hostmaster.localhost.
          rrsets:
            - name: t1.d4.rrset.example.
              type: A
              ttl: 900
              records:
                - content: 192.168.0.0
                  disabled: true
                - content: 192.168.0.1
                - content: 192.168.1.2
                - content: 192.168.3.4
            - name: t2.d4.rrset.example.
              type: A
              ttl: 600
              records:
                - content: 192.168.4.0
                  disabled: true
                - content: 192.168.5.1
                - content: 192.168.6.2
                - content: 192.168.7.4
      ignore_errors: true
      register: result

    - ansible.builtin.assert:
        quiet: true
        that:
          - result['exception'] is not defined
          - not result.failed
          - result.changed
          - t1_d4_rrset[0]['type'] == 'A'
          - t1_d4_rrset[0]['ttl'] == 900
          - (t1_d4_rrset | sort(attribute='address'))[0]['address'] == "192.168.0.1"
          - (t1_d4_rrset | sort(attribute='address'))[1]['address'] == "192.168.1.2"
          - (t1_d4_rrset | sort(attribute='address'))[2]['address'] == "192.168.3.4"
          - t2_d4_rrset[0]['type'] == 'A'
          - t2_d4_rrset[0]['ttl'] == 600
          - (t2_d4_rrset | sort(attribute='address'))[0]['address'] == "192.168.5.1"
          - (t2_d4_rrset | sort(attribute='address'))[1]['address'] == "192.168.6.2"
          - (t2_d4_rrset | sort(attribute='address'))[2]['address'] == "192.168.7.4"
      vars:
        t1_d4_rrset: "{{ lookup('dig_local', 't1.d4.rrset.example.', qtype='A', flat=0, fail_on_error=false, real_empty=false) }}"
        t2_d4_rrset: "{{ lookup('dig_local', 't2.d4.rrset.example.', qtype='A', flat=0, fail_on_error=false, real_empty=false) }}"
